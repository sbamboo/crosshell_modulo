# region ============================[Crosshell Cmdlet Python Hints. Modulo:0.0.0]============================
# This block of code creates hints/definitions for variables that are scoped into/for cmdlets.
# Any code in this block can be ignored by you as a developer and is only here to help you.
# Written/AutoGenerated by CmdletsTools V1, made by Simon Kalmi Claesson.
# Crsh.Hints.BlockIdentifier: ad3e849c-2ebe-4fe3-9c47-2cdf685ee4f6
# [Import]
from types import FunctionType,MethodType
# [General] (Main)
csSession: object
argv: str
sargv: str
CSScriptRoot = str
CSScriptData = dict
CS_PackDir = str
CS_CurDir = str
CS_BaseDir = str
CS_CoreDir = str
CS_IsCaptured = bool
CS_InPipeline = bool
# [General] (Mostlikely imported from globalEntries.json but some might be missing or not included)
fprint = FunctionType
csLoadPackageData = FunctionType
fromPath = FunctionType
intpip = FunctionType
autopipImport = FunctionType
CS_GetEncoding = FunctionType
# [Internal Exiting] (Use only if needed, only included if crosshells safe exit is enabled)
CS_oexit: object
# [Internal Buffering] (Use only if needed, only included if captured)
buffer_bwrite: MethodType
buffer_cwrite: MethodType
buffer_cwrite_adv: MethodType
buffer_bwrite_autoNL: MethodType
buffer_cwrite_autoNL: MethodType
CS_oinput: object
# [Internal Exceptions] (Use only if needed)
CrosshellDebErr: object
CrosshellExit: object
# [Internal Advanced] (Use only if needed and if restriction mode allow for it!)
CS_Text: object
CS_Registry: object
CS_LastInput: str
CS_LastOutput: str
CS_PipeLine: object
CS_Inpparse: object
CS_Exec: object
CS_Console: object
loadPackages: FunctionType
exclude_nonToFormat: FunctionType
include_nonToFormat: FunctionType
removeAnsiSequences: FunctionType
writeWelcome: FunctionType
# endregion ============================[Crosshell Cmdlet Python Hints. Modulo:0.0.0]============================


# Get content
from cslib.externalLibs.filesys import filesys as fs
raw_content = sargv
lines = raw_content.split("\n")

# Save prev
old_CS_LastInput = CS_LastInput
old_CS_LastOutput = CS_LastOutput 
old_CS_PipeLine = CS_PipeLine

# Create pipeline
from cslib.execution import execline
CS_PipeLine = execline()

# Execute for each line
try:
    for line in lines:
        # Set input
        CS_LastInput = line
        # Clear outputs
        CS_LastOutput = None
        # Execute input
        if CS_LastInput != "":
            CS_Inpparse.execute_internally(globals())
            CS_Exec.execute_internally(globals())
        # Handle and print output
        if CS_LastOutput != None and CS_LastOutput != "":
            if type(CS_LastOutput) == str:
                # Global Text System
                formatMode = csSession.data["set"].getProperty("crsh","Console.FormatOutMode")
                if formatMode == False: formatMode = "off"
                formatMode = formatMode.lower()
                if formatMode != "off":
                    toformat,excludes = exclude_nonToFormat(CS_LastOutput)
                    formatted = csSession.data["txt"].parse(toformat)
                    final = include_nonToFormat(formatted,excludes)
                    if formatMode == "strip":
                        final = removeAnsiSequences(final)
                else: final = CS_LastOutput
                print(final)
            elif type(CS_LastOutput) == CrosshellDebErr:
                print(CS_LastOutput)
except CrosshellExit as e:
    print(e)